   (1) % Define frames, variables, constants, and points
   (2) RigidFrame N, B
   (3) Variable y'', theta''
   (4) Constant ln = 0.5 m
   (5) Constant K = 100 N/m
   (6) Constant m = 1 kg
   (7) Constant g = 9.81 m/s^2
   (8) Point N0(N), P(B)
   (9) % Define rotation between frames
   (10) B.RotateZ(N, theta)
-> (11) B_N = [cos(theta), sin(theta), 0;  -sin(theta), cos(theta), 0;  0, 0, 1]
-> (12) w_B_N> = theta'*Bz>
-> (13) alf_B_N> = theta''*Bz>

   (14) % Define position vector from N0 to P
   (15) p_N0_P> = (-ln - y)*by>
-> (16) p_N0_P> = (-ln-y)*By>

   (17) % Define velocity and acceleration of point P in frame N
   (18) v_N0_N> = 0>
-> (19) v_N0_N> = 0>

   (20) P.SetVelocity(N, Dt(p_N0_P>, N))
-> (21) v_P_N> = (ln+y)*theta'*Bx> - y'*By>

   (22) P.SetAcceleration(N, Dt(v_P_N>, N))
-> (23) a_P_N> = (2*theta'*y'+(ln+y)*theta'')*Bx> + ((ln+y)*theta'^2-y'')*By>

   (24) % Define a force vector acting on point P
   (25) F_P> = K*y*by> - m*g*ny>
-> (26) F_P> = K*y*By> - g*m*Ny>

   (27) % Create F = ma equations for both the x and y in N
   (28) eqns[1] = Dot(F_P>, ny>) - m*Dot(a_P_N>, ny>)
-> (29) eqns[1] = K*y*cos(theta) - g*m - m*(sin(theta)*(2*theta'*y'+(ln+y)*the
        ta'')+cos(theta)*((ln+y)*theta'^2-y''))

   (30) eqns[2] = Dot(F_P>, nx>) - m*Dot(a_P_N>, nx>)
-> (31) eqns[2] = m*(sin(theta)*((ln+y)*theta'^2-y'')-cos(theta)*(2*theta'*y'+(
        ln+y)*theta'')) - K*y*sin(theta)

   (32) % Solve for y'' and theta''
   (33) Solve(eqns = 0, y'', theta'')
-> (34) y'' = g*cos(theta) + (ln+y)*theta'^2 - K*y/m
-> (35) theta'' = -(g*sin(theta)+2*theta'*y')/(ln+y)

   (36) Input tFinal=16, integStp=0.01 % Integration parameters
   (37) Input y = 0.2, y' = 0, theta = 0.0174533, theta' = 0 % Integration initial conditions
   (38) OutputPlot t, theta % Values that I want plotted
   (39) ODE() hw_7_13.m
