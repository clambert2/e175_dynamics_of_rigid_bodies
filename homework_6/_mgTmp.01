   (1) % Tippee top mass properties
   (2) RigidFrame C       
   (3) Point C0(C), Ccm(C)
   (4) RigidBody R, CC, PS
   (5) Constant Rs, l, d, h, r       % Parameters on drawing
   (6) Constant Ixx, Iyy, Izz, k        % You will define for whole top in C vectors
   (7) Constant g, rho                  % Gravity, density of wood
   (8) Constant mPS, dPS, IPSzz, IPSxx  % Parameters for sphere without cap (see table)
   (9) % Mass property expressions ----------------------------
   (10) % Center of mass calculations
   (11) mR = pi*r^2*h*rho % mass of the cylindrical rod
-> (12) mR = pi*h*rho*r^2

   (13) mCC = -pi*d/2*(l - h)*rho % mass of the cylindrical cutout
-> (14) mCC = 1.570796*d*rho*(h-l)

   (15) p_C0_Rcm> = (h/2)*cz> % position of rod cm
-> (16) p_C0_Rcm> = 0.5*h*Cz>

   (17) p_C0_CCcm> = (l/2)*cz> % position of cutout cm
-> (18) p_C0_CCcm> = 0.5*l*Cz>

   (19) p_C0_PScm> = -dPS*cz> % position of sphere cm
-> (20) p_C0_PScm> = -dPS*Cz>

   (21) mC = mPS + mR + mCC % total mass 
-> (22) mC = mPS + mCC + mR

   (23) kvec> = (1/mC)*(mPS*p_C0_PScm> + mR*p_C0_Rcm> + mCC*p_C0_CCcm>) % total cm position
-> (24) kvec> = -0.5*(2*dPS*mPS-h*mR-l*mCC)/mC*Cz>

   (25) p_C0_Ccm> = kvec> % position of top cm
-> (26) p_C0_Ccm> = -0.5*(2*dPS*mPS-h*mR-l*mCC)/mC*Cz>

   (27) % Inertia dyadic calculations ----------------------------
   (28) % Rod inertia about its cm
   (29) IRcm_xx = (1/12)*mR*(3*r^2 + h^2)
-> (30) IRcm_xx = 0.08333333*(h^2+3*r^2)*mR

   (31) IRcm_yy = IRcm_xx
-> (32) IRcm_yy = IRcm_xx

   (33) IRcm_zz = (1/2)*mR*r^2
-> (34) IRcm_zz = 0.5*r^2*mR

   (35) R.SetInertia(Rcm, C, IRcm_xx, IRcm_yy, IRcm_zz)
   (36) I_R_C0>> = I_R_Rcm>> + mR*(1>>*Dot(P_Ccm_Rcm>,P_Ccm_Rcm>) - P_Ccm_Rcm>*P_Ccm_Rcm>)
-> (37) I_R_C0>> = 0.25*mR*(h+(2*dPS*mPS-h*mR-l*mCC)/mC)^2*1>> + IRcm_xx*Cx>*Cx>
        + IRcm_yy*Cy>*Cy> + (IRcm_zz-0.25*mR*(h+(2*dPS*mPS-h*mR-l*mCC)/mC)^2)*
        Cz>*Cz>

   (38) % Cutout inertia about its cm
   (39) ICCcm_xx = (1/12)*mCC*(3*(d/2)^2 + (l - h)^2)
-> (40) ICCcm_xx = 0.0625*(d^2+1.333333*(h-l)^2)*mCC

   (41) ICCcm_yy = ICCcm_xx
-> (42) ICCcm_yy = ICCcm_xx

   (43) ICCcm_zz = (1/2)*mCC*(d/2)^2
-> (44) ICCcm_zz = 0.125*d^2*mCC

   (45) CC.SetInertia(CCcm, C, ICCcm_xx, ICCcm_yy, ICCcm_zz)
   (46) I_CC_C0>> = I_CC_CCcm>> + mCC*(1>>*Dot(P_Ccm_CCcm>,P_Ccm_CCcm>) - P_Ccm_CCcm>*P_Ccm_CCcm>)
-> (47) I_CC_C0>> = 0.25*mCC*(l+(2*dPS*mPS-h*mR-l*mCC)/mC)^2*1>> + ICCcm_xx*Cx>*Cx>
        + ICCcm_yy*Cy>*Cy> + (ICCcm_zz-0.25*mCC*(l+(2*dPS*mPS-h*mR-l*mCC)/mC)^2)
        *Cz>*Cz>

   (48) % Partial sphere inertia about its cm
   (49) PS.SetInertia(PScm, C, IPSxx, IPSxx, IPSzz)
   (50) I_PS_C0>> = I_PS_PScm>> + mPS*(1>>*Dot(P_Ccm_PScm>,P_Ccm_PScm>) - P_Ccm_PScm>*P_Ccm_PScm>)
-> (51) I_PS_C0>> = (IPSxx+0.25*mPS*(2*dPS-(2*dPS*mPS-h*mR-l*mCC)/mC)^2)*1>>
        + (IPSzz-IPSxx-0.25*mPS*(2*dPS-(2*dPS*mPS-h*mR-l*mCC)/mC)^2)*Cz>*Cz>

   (52) % Total inertia dyadic about C0
   (53) I_C_C0>> = I_R_C0>> + I_CC_C0>> + I_PS_C0>>
-> (54) I_C_C0>> = (IPSxx+0.25*mCC*(l+(2*dPS*mPS-h*mR-l*mCC)/mC)^2+0.25*mR*(h+(
        2*dPS*mPS-h*mR-l*mCC)/mC)^2+0.25*mPS*(2*dPS-(2*dPS*mPS-h*mR-l*mCC)/mC)^2)*1>>
        + (ICCcm_xx+IRcm_xx)*Cx>*Cx> + (ICCcm_yy+IRcm_yy)*Cy>*Cy> + (IPSzz+ICC
        cm_zz+IRcm_zz-IPSxx-0.25*mCC*(l+(2*dPS*mPS-h*mR-l*mCC)/mC)^2-0.25*mR*(h
        +(2*dPS*mPS-h*mR-l*mCC)/mC)^2-0.25*mPS*(2*dPS-(2*dPS*mPS-h*mR-l*mCC)/mC)^2)
        *Cz>*Cz>

   (55) % Numerical evaluations  -------------------------------
   (56) Input Rs = 0.019 m, l = 0.016 m, d = 0.022 m
   (57) Input r = 0.0032 m,  h = 0.032 m 
   (58) Input mPS = 0.02 kg, dPS = 4.24e-4 m, IPSzz = 1.47e-6 kg*m^2, IPSxx = 2.83e-6 kg*m^2
   (59) Input g = 9.81 m/s^2, rho = 709 kg/m^3
   (60) % An expression has to be in an assignment line to end up in output file
   (61) k = EvaluateAtInput(mag(kvec>))
-> (62) k = 0.007605958

   (63) I_C_C0_eval>> = EvaluateAtInput(I_C_C0>>)
-> (64) I_C_C0_eval>> = 4.2319E-06*1>> + 2.028587E-05*Cx>*Cx> + 2.028587E-05*
        Cy>*Cy> + 2.095908E-05*Cz>*Cz>

   (65) 